#!/usr/bin/env python
"""
Highly divisible triangular number
Problem 12
Published on 08 March 2002 at 06:00 pm [Server Time]

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

#------------------------------------------------------------------------------ 
import math

#------------------------------------------------------------------------------ 
def gen_trinum():
    current = 1
    trinum = current
    while trinum:        
        yield trinum
        current += 1
        trinum += current
        
#def get_divisors(dividend):
    
def find_all_divisors(x):
    divList = []
    y = 1
    while y <= math.sqrt(x):
        if x % y == 0:
            divList.append(y)
            divList.append(int(x / y))
        y += 1
    return divList
    
def solve():
    gtn = gen_trinum()
    highest = 0
    while True:
        tn = next(gtn)
        if len(find_all_divisors(tn)) > 500:
            break
    return tn
        

def main():
    print "PROBLEM:\n"
    for line in __doc__.strip().split('\n'):
        print '\t', line    
    print "\nSOLUTION:"
    print "\n\t", solve()

#------------------------------------------------------------------------------ 
if __name__ == "__main__":
    main()
